"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ServerProperties_1 = require("../ServerProperties");
var StringTools_1 = require("../Toolkit/StringTools");
var Message_1 = require("./Message");
var MessageTypes_1 = require("./MessageTypes");
function parsePrefix(raw) {
    var _a = __read(StringTools_1.splitWithLimit(raw, '!', 2), 2), nick = _a[0], hostName = _a[1];
    if (hostName) {
        var _b = __read(StringTools_1.splitWithLimit(hostName, '@', 2), 2), user = _b[0], host = _b[1];
        if (host) {
            return { nick: nick, user: user, host: host };
        }
        else {
            return { nick: nick, host: user };
        }
    }
    else {
        return { nick: nick };
    }
}
exports.parsePrefix = parsePrefix;
var tagUnescapeMap = {
    ':': ';',
    n: '\n',
    r: '\r',
    s: ' '
};
function parseTags(raw) {
    var e_1, _a;
    var tags = new Map();
    var tagStrings = raw.split(';');
    try {
        for (var tagStrings_1 = __values(tagStrings), tagStrings_1_1 = tagStrings_1.next(); !tagStrings_1_1.done; tagStrings_1_1 = tagStrings_1.next()) {
            var tagString = tagStrings_1_1.value;
            var _b = __read(StringTools_1.splitWithLimit(tagString, '=', 2), 2), tagName = _b[0], tagValue = _b[1];
            if (tagName === '') {
                continue; // Ignore empty tags: @ @; @x; etc.
            }
            // unescape according to http://ircv3.net/specs/core/message-tags-3.2.html#escaping-values
            tags.set(tagName, tagValue
                ? tagValue.replace(/\\(.?)/g, function (_, match) {
                    return Object.prototype.hasOwnProperty.call(tagUnescapeMap, match) ? tagUnescapeMap[match] : match;
                })
                : '');
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (tagStrings_1_1 && !tagStrings_1_1.done && (_a = tagStrings_1.return)) _a.call(tagStrings_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return tags;
}
exports.parseTags = parseTags;
function parseMessage(line, serverProperties, knownCommands, isServer, nonConformingCommands) {
    if (serverProperties === void 0) { serverProperties = ServerProperties_1.defaultServerProperties; }
    if (knownCommands === void 0) { knownCommands = MessageTypes_1.all; }
    if (isServer === void 0) { isServer = false; }
    if (nonConformingCommands === void 0) { nonConformingCommands = []; }
    var splitLine = line.split(' ');
    var token;
    var command;
    var params = [];
    var tags;
    var prefix;
    while (splitLine.length) {
        token = splitLine[0];
        if (token[0] === '@' && !tags && !command && !prefix) {
            tags = parseTags(token.substr(1));
        }
        else if (token[0] === ':') {
            if (!prefix && !command) {
                if (token.length > 1) {
                    // Not an empty prefix
                    prefix = parsePrefix(token.substr(1));
                }
            }
            else {
                params.push({
                    value: splitLine.join(' ').substr(1),
                    trailing: true
                });
                break;
            }
        }
        else if (command) {
            params.push({
                value: token,
                trailing: false
            });
        }
        else {
            command = token.toUpperCase();
        }
        splitLine.shift();
    }
    if (!tags) {
        tags = new Map();
    }
    if (!command) {
        throw new Error("line without command received: " + line);
    }
    var messageClass = Message_1.default;
    if (knownCommands.has(command)) {
        messageClass = knownCommands.get(command);
    }
    return new messageClass(command, params, tags, prefix, serverProperties, line, isServer, !nonConformingCommands.includes(command));
}
exports.parseMessage = parseMessage;
//# sourceMappingURL=MessageParser.js.map