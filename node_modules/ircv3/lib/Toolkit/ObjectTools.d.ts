/** @private */
export declare type ObjMap<Obj, T> = Record<Extract<keyof Obj, string>, T>;
/** @private */
export declare type ObjMapPart<Obj, T> = Partial<ObjMap<Obj, T>>;
/** @private */
export interface UniformObject<T> {
    [name: string]: T;
}
/** @private */
export declare type KeyMapper<T> = (value: T) => string;
/** @private */
export default class ObjectTools {
    static map<T, O, Obj = UniformObject<T>>(obj: Obj, fn: (value: T, key: Extract<keyof Obj, string>) => O): Record<Extract<keyof Obj, string>, O>;
    static keys<Obj>(o: Obj): Array<keyof Obj>;
    static indexBy<T>(arr: T[], key: Extract<keyof T, string>): UniformObject<T>;
    static indexBy<T>(arr: T[], keyFn: KeyMapper<T>): UniformObject<T>;
    static fromArray<T, O, Obj>(arr: T[], fn: (value: T) => ObjMapPart<Obj, O>): Record<Extract<keyof Obj, string>, O>;
    static forEach<T, Obj>(obj: Obj, fn: (value: T, key: keyof Obj) => void): void;
}
