export declare type Omit<T extends object, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
declare type FilterFlags<Base, Condition> = {
    [Key in Extract<keyof Base, string>]: Base[Key] extends Condition ? Key : never;
};
declare type AllowedNames<Base, Condition> = FilterFlags<Base, Condition>[Extract<keyof Base, string>];
export declare type PickType<Base, Condition> = Record<AllowedNames<Base, Condition>, Condition>;
export declare type ConstructedType<C> = C extends new (...params: any[]) => infer T ? T : never;
export {};
