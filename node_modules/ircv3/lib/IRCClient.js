"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = require("@d-fischer/logger");
var typed_event_emitter_1 = require("@d-fischer/typed-event-emitter");
var clone = require("clone");
var CoreCapabilities = require("./Capability/CoreCapabilities");
var DirectConnection_1 = require("./Connection/DirectConnection");
var WebSocketConnection_1 = require("./Connection/WebSocketConnection");
var Message_1 = require("./Message/Message");
var MessageCollector_1 = require("./Message/MessageCollector");
var MessageParser_1 = require("./Message/MessageParser");
var MessageTypes = require("./Message/MessageTypes");
var Commands_1 = require("./Message/MessageTypes/Commands");
var ClientQuit_1 = require("./Message/MessageTypes/Commands/ClientQuit");
var Numerics_1 = require("./Message/MessageTypes/Numerics");
var ServerProperties_1 = require("./ServerProperties");
var MessageError_1 = require("./Errors/MessageError");
var NonEnumerable_1 = require("./Toolkit/NonEnumerable");
var ObjectTools_1 = require("./Toolkit/ObjectTools");
var StringTools_1 = require("./Toolkit/StringTools");
var IRCClient = /** @class */ (function (_super) {
    __extends(IRCClient, _super);
    function IRCClient(options) {
        var e_1, _a;
        var _this = _super.call(this) || this;
        _this._registered = false;
        _this._supportsCapabilities = true;
        _this._events = new Map();
        _this._registeredMessageTypes = new Map();
        // emitted events
        _this.onConnect = _this.registerEvent();
        _this.onRegister = _this.registerEvent();
        _this.onDisconnect = _this.registerEvent();
        _this.onPrivmsg = _this.registerEvent();
        _this.onAction = _this.registerEvent();
        _this.onNotice = _this.registerEvent();
        _this.onNickChange = _this.registerEvent();
        _this.onCtcp = _this.registerEvent();
        _this.onCtcpReply = _this.registerEvent();
        _this.onAnyMessage = _this.registerEvent();
        _this._serverProperties = clone(ServerProperties_1.defaultServerProperties, false);
        _this._supportedFeatures = {};
        _this._collectors = [];
        _this._clientCapabilities = new Map();
        _this._serverCapabilities = new Map();
        _this._negotiatedCapabilities = new Map();
        var connection = options.connection, credentials = options.credentials, channelTypes = options.channelTypes, _b = options.logLevel, logLevel = _b === void 0 ? logger_1.LogLevel.WARNING : _b;
        _this._options = options;
        var _c = connection.pingOnInactivity, pingOnInactivity = _c === void 0 ? 60 : _c, _d = connection.pingTimeout, pingTimeout = _d === void 0 ? 10 : _d;
        _this._pingOnInactivity = pingOnInactivity;
        _this._pingTimeout = pingTimeout;
        _this._currentNick = credentials.nick;
        _this._logger = new logger_1.default({ name: 'ircv3', emoji: true, minLevel: logLevel });
        _this.registerCoreMessageTypes();
        try {
            for (var _e = __values(Object.values(CoreCapabilities)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var cap = _f.value;
                _this.registerCapability(cap);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        _this.onMessage(Commands_1.CapabilityNegotiation, function (_a) {
            var _b = _a.params, subCommand = _b.subCommand, capabilities = _b.capabilities;
            var e_2, _c, e_3, _d;
            var caps = capabilities.split(' ');
            // eslint-disable-next-line default-case
            switch (subCommand.toUpperCase()) {
                case 'NEW': {
                    _this._logger.debug2("Server registered new capabilities: " + caps.join(', '));
                    var capList = ObjectTools_1.default.fromArray(caps, function (part) {
                        var _a;
                        if (!part) {
                            return {};
                        }
                        var _b = __read(StringTools_1.splitWithLimit(part, '=', 2), 2), cap = _b[0], param = _b[1];
                        return _a = {},
                            _a[cap] = {
                                name: cap,
                                param: param || true
                            },
                            _a;
                    });
                    try {
                        for (var _e = __values(Object.entries(capList)), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var _g = __read(_f.value, 2), name_1 = _g[0], cap = _g[1];
                            _this._serverCapabilities.set(name_1, cap);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_c = _e.return)) _c.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    var capNames_1 = Object.keys(capList);
                    _this._negotiateCapabilities(Array.from(_this._clientCapabilities.entries())
                        .filter(function (_a) {
                        var _b = __read(_a, 1), name = _b[0];
                        return capNames_1.includes(name);
                    })
                        .map(function (_a) {
                        var _b = __read(_a, 2), cap = _b[1];
                        return cap;
                    }));
                    break;
                }
                case 'DEL': {
                    _this._logger.debug2("Server removed capabilities: " + caps.join(', '));
                    try {
                        for (var caps_1 = __values(caps), caps_1_1 = caps_1.next(); !caps_1_1.done; caps_1_1 = caps_1.next()) {
                            var cap = caps_1_1.value;
                            _this._serverCapabilities.delete(cap);
                            _this._negotiatedCapabilities.delete(cap);
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (caps_1_1 && !caps_1_1.done && (_d = caps_1.return)) _d.call(caps_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
        });
        _this.onMessage(Commands_1.Ping, function (_a) {
            var message = _a.params.message;
            _this.sendMessage(Commands_1.Pong, { message: message });
        });
        _this.onMessage(Numerics_1.Reply001Welcome, function () {
            if (!_this._supportsCapabilities) {
                _this._registered = true;
                _this.emit(_this.onRegister);
            }
        });
        _this.onMessage(Numerics_1.Reply004ServerInfo, function (_a) {
            var userModes = _a.params.userModes;
            if (userModes) {
                _this._serverProperties.supportedUserModes = userModes;
            }
        });
        _this.onMessage(Numerics_1.Reply005ISupport, function (_a) {
            var supports = _a.params.supports;
            var newFeatures = ObjectTools_1.default.fromArray(supports.split(' '), function (part) {
                var _a;
                var _b = __read(StringTools_1.splitWithLimit(part, '=', 2), 2), support = _b[0], param = _b[1];
                return _a = {}, _a[support] = param || true, _a;
            });
            _this._supportedFeatures = __assign({}, _this._supportedFeatures, newFeatures);
        });
        _this.onMessage(Numerics_1.Error462AlreadyRegistered, function () {
            // what, I thought we are not registered yet?
            if (!_this._registered) {
                // screw this, we are now.
                _this._logger.warn("We thought we're not registered yet, but we actually are");
                _this._registered = true;
                _this.emit(_this.onRegister);
            }
        });
        _this.onMessage(Commands_1.PrivateMessage, function (msg) {
            var _a = msg.params, target = _a.target, message = _a.message;
            var ctcpMessage = StringTools_1.decodeCtcp(message);
            var nick = msg.prefix && msg.prefix.nick;
            if (ctcpMessage) {
                if (ctcpMessage.command === 'ACTION') {
                    _this.emit(_this.onAction, target, nick, ctcpMessage.params, msg);
                }
                else {
                    _this.emit(_this.onCtcp, target, nick, ctcpMessage.command, ctcpMessage.params, msg);
                }
            }
            else {
                _this.emit(_this.onPrivmsg, target, nick, message, msg);
            }
        });
        _this.onMessage(Commands_1.NickChange, function (msg) {
            var newNick = msg.params.nick;
            var oldNick = msg.prefix && msg.prefix.nick;
            if (oldNick === _this._currentNick) {
                _this._currentNick = newNick;
            }
            _this.emit(_this.onNickChange, oldNick, newNick, msg);
        });
        _this.onMessage(Commands_1.Notice, function (msg) {
            var _a = msg.params, target = _a.target, message = _a.message;
            var ctcpMessage = StringTools_1.decodeCtcp(message);
            var nick = msg.prefix && msg.prefix.nick;
            if (ctcpMessage) {
                _this.emit(_this.onCtcpReply, target, nick, ctcpMessage.command, ctcpMessage.params, msg);
            }
            _this.emit(_this.onNotice, target, nick, message, msg);
        });
        _this.onRegister(function () { return _this._startPingCheckTimer(); });
        _this._credentials = __assign({}, credentials);
        if (channelTypes) {
            _this._serverProperties.channelTypes = channelTypes;
        }
        return _this;
    }
    IRCClient.prototype.setupConnection = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, connection, webSocket, _b, nonConformingCommands, _c, reconnect, password;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = this._options, connection = _a.connection, webSocket = _a.webSocket, _b = _a.nonConformingCommands, nonConformingCommands = _b === void 0 ? [] : _b;
                        _c = connection.reconnect, reconnect = _c === void 0 ? true : _c;
                        this._connection = webSocket ? new WebSocketConnection_1.default(connection) : new DirectConnection_1.default(connection);
                        this._logger.debug1('Determining connection password');
                        return [4 /*yield*/, this.getPassword(this._credentials.password)];
                    case 1:
                        password = _d.sent();
                        if (password) {
                            if (password !== this._credentials.password) {
                                this._updateCredentials({ password: password });
                            }
                        }
                        this._connection.on('connect', function () { return __awaiter(_this, void 0, void 0, function () {
                            var _this = this;
                            return __generator(this, function (_a) {
                                this._retryDelayGenerator = undefined;
                                this._logger.info("Connection to server " + this._connection.host + ":" + this._connection.port + " established");
                                this.sendMessageAndCaptureReply(Commands_1.CapabilityNegotiation, {
                                    subCommand: 'LS',
                                    version: '302'
                                }).then(function (capReply) {
                                    if (!capReply.length || !(capReply[0] instanceof Commands_1.CapabilityNegotiation)) {
                                        _this._logger.debug2('Server does not support capabilities');
                                        return;
                                    }
                                    _this._supportsCapabilities = true;
                                    var capLists = capReply.map(function (line) {
                                        return ObjectTools_1.default.fromArray(line.params.capabilities.split(' '), function (part) {
                                            var _a;
                                            if (!part) {
                                                return {};
                                            }
                                            var _b = __read(StringTools_1.splitWithLimit(part, '=', 2), 2), cap = _b[0], param = _b[1];
                                            return _a = {},
                                                _a[cap] = {
                                                    name: cap,
                                                    param: param || true
                                                },
                                                _a;
                                        });
                                    });
                                    _this._serverCapabilities = new Map(Object.entries(Object.assign.apply(Object, __spread([{}], capLists))));
                                    _this._logger.debug2("Capabilities supported by server: " + Array.from(_this._serverCapabilities.keys()).join(', '));
                                    var capabilitiesToNegotiate = capLists.map(function (list) {
                                        var capNames = Object.keys(list);
                                        return Array.from(_this._clientCapabilities.entries())
                                            .filter(function (_a) {
                                            var _b = __read(_a, 1), name = _b[0];
                                            return capNames.includes(name);
                                        })
                                            .map(function (_a) {
                                            var _b = __read(_a, 2), cap = _b[1];
                                            return cap;
                                        });
                                    });
                                    _this._negotiateCapabilityBatch(capabilitiesToNegotiate).then(function () {
                                        _this.sendMessage(Commands_1.CapabilityNegotiation, { subCommand: 'END' });
                                        _this._registered = true;
                                        _this.emit(_this.onRegister);
                                    });
                                });
                                if (password) {
                                    this.sendMessage(Commands_1.Password, { password: password });
                                }
                                this.sendMessage(Commands_1.NickChange, { nick: this._credentials.nick });
                                this.sendMessage(Commands_1.UserRegistration, {
                                    user: this._credentials.userName || this._credentials.nick,
                                    mode: '8',
                                    unused: '*',
                                    realName: this._credentials.realName || this._credentials.nick
                                });
                                return [2 /*return*/];
                            });
                        }); });
                        this._connection.on('lineReceived', function (line) {
                            _this._logger.debug1("Received message: " + line);
                            var parsedMessage;
                            try {
                                parsedMessage = MessageParser_1.parseMessage(line, _this._serverProperties, _this._registeredMessageTypes, true, nonConformingCommands);
                            }
                            catch (e) {
                                _this._logger.err("Error parsing message: " + e.message);
                                _this._logger.trace(e.stack);
                                return;
                            }
                            _this._logger.debug3("Parsed message: " + JSON.stringify(parsedMessage));
                            _this._startPingCheckTimer();
                            _this.emit(_this.onAnyMessage, parsedMessage);
                            _this.handleEvents(parsedMessage);
                        });
                        this._connection.on('disconnect', function (manually, reason) {
                            _this._registered = false;
                            if (_this._pingCheckTimer) {
                                clearTimeout(_this._pingCheckTimer);
                            }
                            if (_this._pingTimeoutTimer) {
                                clearTimeout(_this._pingTimeoutTimer);
                            }
                            if (manually) {
                                _this._logger.info('Disconnected manually');
                            }
                            else {
                                if (reason) {
                                    _this._logger.err("Disconnected unexpectedly: " + reason.message);
                                }
                                else {
                                    _this._logger.err('Disconnected unexpectedly');
                                }
                            }
                            _this.emit(_this.onDisconnect, manually, reason);
                            _this._connection = undefined;
                            if (!manually && reconnect) {
                                if (!_this._retryDelayGenerator) {
                                    _this._retryDelayGenerator = IRCClient._getReconnectWaitTime();
                                }
                                var delay = _this._retryDelayGenerator.next().value;
                                _this._logger.info("Reconnecting in " + delay + " seconds");
                                _this._retryTimer = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    return [2 /*return*/, this.connect()];
                                }); }); }, delay * 1000);
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(IRCClient.prototype, "serverProperties", {
        get: function () {
            return clone(this._serverProperties, false);
        },
        enumerable: true,
        configurable: true
    });
    IRCClient.prototype.pingCheck = function () {
        var _this = this;
        var now = Date.now();
        var nowStr = now.toString();
        var handler = this.onMessage(Commands_1.Pong, function (msg) {
            var message = msg.params.message;
            if (message === nowStr) {
                _this._logger.debug2("Current ping: " + (Date.now() - now) + "ms");
                if (_this._pingTimeoutTimer) {
                    clearTimeout(_this._pingTimeoutTimer);
                }
                _this.removeMessageListener(handler);
            }
        });
        this._pingTimeoutTimer = setTimeout(function () {
            _this._logger.warn("Reconnecting because the last ping took over " + _this._pingTimeout + " seconds");
            _this.removeMessageListener(handler);
            _this.reconnect('Ping timeout');
        }, this._pingTimeout * 1000);
        this.sendMessage(Commands_1.Ping, { message: nowStr });
    };
    IRCClient.prototype.reconnect = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.quit(message);
                return [2 /*return*/, this.connect()];
            });
        });
    };
    IRCClient.prototype.registerMessageType = function (cls) {
        if (cls.COMMAND !== '') {
            this._logger.debug3("Registering message type " + cls.COMMAND);
            this._registeredMessageTypes.set(cls.COMMAND.toUpperCase(), cls);
        }
    };
    IRCClient.prototype.knowsCommand = function (command) {
        return this._registeredMessageTypes.has(command.toUpperCase());
    };
    IRCClient.prototype.getCommandClass = function (command) {
        return this._registeredMessageTypes.get(command.toUpperCase());
    };
    IRCClient.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._supportsCapabilities = false;
                        this._negotiatedCapabilities = new Map();
                        this._currentNick = this._credentials.nick;
                        return [4 /*yield*/, this.setupConnection()];
                    case 1:
                        _a.sent();
                        this._logger.info("Connecting to " + this._connection.host + ":" + this._connection.port);
                        return [4 /*yield*/, this._connection.connect()];
                    case 2:
                        _a.sent();
                        this.emit(this.onConnect);
                        return [2 /*return*/];
                }
            });
        });
    };
    IRCClient.prototype.waitForRegistration = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this._registered) {
                    return [2 /*return*/, undefined];
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var errorListener;
                        var disconnectListener;
                        var registerListener = _this.onRegister(function () {
                            registerListener.unbind();
                            _this.removeMessageListener(errorListener);
                            disconnectListener.unbind();
                            resolve();
                        });
                        errorListener = _this.onMessage(MessageTypes.Commands.ErrorMessage, function (msg) {
                            registerListener.unbind();
                            _this.removeMessageListener(errorListener);
                            disconnectListener.unbind();
                            reject(new MessageError_1.default(msg));
                        });
                        disconnectListener = _this.onDisconnect(function (reason) {
                            registerListener.unbind();
                            _this.removeMessageListener(errorListener);
                            disconnectListener.unbind();
                            reject(reason);
                        });
                    })];
            });
        });
    };
    IRCClient.prototype.registerCapability = function (cap) {
        return __awaiter(this, void 0, void 0, function () {
            var e_4, _a, _b, _c, messageType;
            return __generator(this, function (_d) {
                this._clientCapabilities.set(cap.name, cap);
                if (cap.messageTypes) {
                    try {
                        for (_b = __values(cap.messageTypes), _c = _b.next(); !_c.done; _c = _b.next()) {
                            messageType = _c.value;
                            this.registerMessageType(messageType);
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
                if (this._serverCapabilities.has(cap.name)) {
                    return [2 /*return*/, this._negotiateCapabilities([cap])];
                }
                return [2 /*return*/, []];
            });
        });
    };
    IRCClient.prototype.send = function (message) {
        this.sendRaw(message.toString());
    };
    IRCClient.prototype.sendRaw = function (line) {
        if (this._connection) {
            this._logger.debug1("Sending message: " + line);
            this._connection.sendLine(line);
        }
    };
    IRCClient.prototype.onMessage = function (type, handler, handlerName) {
        var commandName = typeof type === 'string' ? type : type.COMMAND;
        if (!this._events.has(commandName)) {
            this._events.set(commandName, new Map());
        }
        var handlerList = this._events.get(commandName);
        if (!handlerName) {
            do {
                handlerName = commandName + ":" + StringTools_1.padLeft(Math.random() * 10000, 4, '0');
            } while (handlerList.has(handlerName));
        }
        handlerList.set(handlerName, handler);
        return handlerName;
    };
    IRCClient.prototype.removeMessageListener = function (handlerName) {
        var _a = __read(handlerName.split(':'), 1), commandName = _a[0];
        if (!this._events.has(commandName)) {
            return;
        }
        this._events.get(commandName).delete(handlerName);
    };
    IRCClient.prototype.createMessage = function (type, params, tags) {
        return Message_1.createMessage(type, params, undefined, tags, this.serverProperties);
    };
    IRCClient.prototype.sendMessage = function (type, params) {
        this.send(this.createMessage(type, params));
    };
    IRCClient.prototype.sendMessageAndCaptureReply = function (type, params) {
        return __awaiter(this, void 0, void 0, function () {
            var message, promise;
            return __generator(this, function (_a) {
                if (!type.SUPPORTS_CAPTURE) {
                    throw new Error("The command \"" + type.COMMAND + "\" does not support reply capture");
                }
                message = this.createMessage(type, params);
                promise = this.collect(message).promise();
                this.send(message);
                return [2 /*return*/, promise];
            });
        });
    };
    Object.defineProperty(IRCClient.prototype, "isConnected", {
        get: function () {
            return this._connection ? this._connection.isConnected : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IRCClient.prototype, "isConnecting", {
        get: function () {
            return this._connection ? this._connection.isConnecting : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IRCClient.prototype, "isRegistered", {
        get: function () {
            return this._registered;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IRCClient.prototype, "currentNick", {
        get: function () {
            return this._currentNick;
        },
        enumerable: true,
        configurable: true
    });
    /** @private */
    IRCClient.prototype.collect = function (originalMessage) {
        var types = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            types[_i - 1] = arguments[_i];
        }
        var collector = new (MessageCollector_1.default.bind.apply(MessageCollector_1.default, __spread([void 0, this, originalMessage], types)))();
        this._collectors.push(collector);
        return collector;
    };
    /** @private */
    IRCClient.prototype.stopCollect = function (collector) {
        this._collectors.splice(this._collectors.findIndex(function (value) { return value === collector; }), 1);
    };
    // convenience methods
    IRCClient.prototype.join = function (channel, key) {
        this.sendMessage(Commands_1.ChannelJoin, { channel: channel, key: key });
    };
    IRCClient.prototype.part = function (channel) {
        this.sendMessage(Commands_1.ChannelPart, { channel: channel });
    };
    IRCClient.prototype.quit = function (message) {
        if (this._retryTimer) {
            clearInterval(this._retryTimer);
        }
        this._retryDelayGenerator = undefined;
        this.sendMessage(ClientQuit_1.default, { message: message });
        if (this._connection) {
            this._connection.disconnect();
        }
    };
    IRCClient.prototype.say = function (target, message) {
        this.sendMessage(Commands_1.PrivateMessage, { target: target, message: message });
    };
    IRCClient.prototype.sendCTCP = function (target, type, message) {
        this.say(target, "\u0001" + type.toUpperCase() + " " + message + "\u0001");
    };
    IRCClient.prototype.action = function (target, message) {
        this.sendCTCP(target, 'ACTION', message);
    };
    IRCClient.prototype.getPassword = function (currentPassword) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, currentPassword];
            });
        });
    };
    IRCClient.prototype.registerCoreMessageTypes = function () {
        var _this = this;
        ObjectTools_1.default.forEach(MessageTypes.Commands, function (type) {
            _this.registerMessageType(type);
        });
        ObjectTools_1.default.forEach(MessageTypes.Numerics, function (type) {
            _this.registerMessageType(type);
        });
    };
    IRCClient.prototype._negotiateCapabilityBatch = function (capabilities) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.all(capabilities
                        .filter(function (list) { return list.length; })
                        .map(function (capList) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                        return [2 /*return*/, this._negotiateCapabilities(capList)];
                    }); }); }))];
            });
        });
    };
    IRCClient.prototype._negotiateCapabilities = function (capList) {
        return __awaiter(this, void 0, void 0, function () {
            var e_5, _a, mappedCapList, messages, capReply, negotiatedCapNames, newNegotiatedCaps, newNegotiatedCaps_1, newNegotiatedCaps_1_1, newCap, mergedCap;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        mappedCapList = ObjectTools_1.default.fromArray(capList, function (cap) {
                            var _a;
                            return (_a = {},
                                _a[cap.name] = cap,
                                _a);
                        });
                        return [4 /*yield*/, this.sendMessageAndCaptureReply(Commands_1.CapabilityNegotiation, {
                                subCommand: 'REQ',
                                capabilities: capList.map(function (cap) { return cap.name; }).join(' ')
                            })];
                    case 1:
                        messages = _b.sent();
                        capReply = messages.shift();
                        if (!capReply) {
                            throw new Error('capability negotiation failed unexpectedly without any reply');
                        }
                        if (!(capReply instanceof Commands_1.CapabilityNegotiation)) {
                            throw new Error("capability negotiation failed unexpectedly with \"" + capReply.command + "\" command");
                        }
                        negotiatedCapNames = capReply.params.capabilities.split(' ').filter(function (c) { return c; });
                        if (capReply.params.subCommand === 'ACK') {
                            // filter is necessary because some networks seem to add trailing spaces...
                            this._logger.debug2("Successfully negotiated capabilities: " + negotiatedCapNames.join(', '));
                            newNegotiatedCaps = negotiatedCapNames.map(function (capName) { return mappedCapList[capName]; });
                            try {
                                for (newNegotiatedCaps_1 = __values(newNegotiatedCaps), newNegotiatedCaps_1_1 = newNegotiatedCaps_1.next(); !newNegotiatedCaps_1_1.done; newNegotiatedCaps_1_1 = newNegotiatedCaps_1.next()) {
                                    newCap = newNegotiatedCaps_1_1.value;
                                    mergedCap = this._clientCapabilities.get(newCap.name);
                                    mergedCap.param = newCap.param;
                                    this._negotiatedCapabilities.set(mergedCap.name, mergedCap);
                                }
                            }
                            catch (e_5_1) { e_5 = { error: e_5_1 }; }
                            finally {
                                try {
                                    if (newNegotiatedCaps_1_1 && !newNegotiatedCaps_1_1.done && (_a = newNegotiatedCaps_1.return)) _a.call(newNegotiatedCaps_1);
                                }
                                finally { if (e_5) throw e_5.error; }
                            }
                            return [2 /*return*/, newNegotiatedCaps];
                        }
                        else {
                            this._logger.debug2("Failed to negotiate capabilities: " + negotiatedCapNames.join(', '));
                            return [2 /*return*/, new Error('capabilities failed to negotiate')];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    IRCClient.prototype._updateCredentials = function (newCredentials) {
        this._credentials = __assign({}, this._credentials, newCredentials);
    };
    // event helper
    IRCClient.prototype.handleEvents = function (message) {
        var e_6, _a;
        this._collectors.some(function (collector) { return collector.collect(message); });
        var handlers = this._events.get(message.constructor.COMMAND);
        if (!handlers) {
            return;
        }
        try {
            for (var _b = __values(handlers.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var handler = _c.value;
                handler(message);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_6) throw e_6.error; }
        }
    };
    IRCClient.prototype._startPingCheckTimer = function () {
        var _this = this;
        if (this._pingCheckTimer) {
            clearTimeout(this._pingCheckTimer);
        }
        this._pingCheckTimer = setTimeout(function () { return _this.pingCheck(); }, this._pingOnInactivity * 1000);
    };
    // yes, this is just fibonacci with a limit
    IRCClient._getReconnectWaitTime = function () {
        var _a, current, next;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    current = 0;
                    next = 1;
                    _b.label = 1;
                case 1:
                    if (!(current < 120)) return [3 /*break*/, 3];
                    return [4 /*yield*/, current];
                case 2:
                    _b.sent();
                    _a = __read([next, current + next], 2), current = _a[0], next = _a[1];
                    return [3 /*break*/, 1];
                case 3:
                    if (!true) return [3 /*break*/, 5];
                    return [4 /*yield*/, 120];
                case 4:
                    _b.sent();
                    return [3 /*break*/, 3];
                case 5: return [2 /*return*/];
            }
        });
    };
    __decorate([
        NonEnumerable_1.NonEnumerable
    ], IRCClient.prototype, "_options", void 0);
    __decorate([
        NonEnumerable_1.NonEnumerable
    ], IRCClient.prototype, "_credentials", void 0);
    return IRCClient;
}(typed_event_emitter_1.EventEmitter));
exports.default = IRCClient;
//# sourceMappingURL=IRCClient.js.map