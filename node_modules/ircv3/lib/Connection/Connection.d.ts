/// <reference types="node" />
import { EventEmitter } from 'events';
export interface ConnectionInfo {
    hostName: string;
    port?: number;
    secure?: boolean;
    reconnect?: boolean;
    pingOnInactivity?: number;
    pingTimeout?: number;
}
declare abstract class Connection extends EventEmitter {
    protected _host: string;
    protected _port?: number;
    protected _secure: boolean;
    protected _connecting: boolean;
    protected _connected: boolean;
    protected _manualDisconnect: boolean;
    private _currentLine;
    constructor({ hostName, port, secure }: ConnectionInfo);
    connect(): Promise<void>;
    disconnect(): void;
    destroy(): void;
    sendLine(line: string): void;
    receiveRaw(data: string): void;
    readonly isConnecting: boolean;
    readonly isConnected: boolean;
    readonly host: string;
    protected _handleDisconnect(error?: Error): void;
    protected abstract doConnect(): Promise<void>;
    protected abstract sendRaw(line: string): void;
    abstract readonly hasSocket: boolean;
    abstract readonly port: number;
}
export default Connection;
